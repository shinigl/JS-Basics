Javascript is a lightweight and interpreted language . 

lightweight -> low CPU usage 
interpreted -> reads code line by line 

Q 1: What type of language is JS?
Ans : Object based 
Not fully OOPS , because of primitive data types.

***FEATURES***

1. Control Statements 
2. Platform independent (can run on any OS) ***
3. Asynchrounous processing 
4. Event handling 

Q 2: How JS can be run outside the browser?

Ans : Node.js 

It is a JS runtime environment that allows developers to run JS code outside the web browser.
Node is built on V8 engine (which is also used by Google Chrome).

***Variables***

It is a container which stores a value .

Ways to declare a variable:
1. var 
2. let
3. const

Ex: var x = 7 ;
    x -> identifer


***Q:3 (Interview) : Difference b/w var , let and const 

1. Inititalization 

var can be declared *without* Inititalization
let can be declared *without* Inititalization
const cannot be declared *without* Inititalization

2. Declaration
var can be updated and re-declared
let  can  be updated but cannot be re-declared
const  cannot be updated but cannot be re-declared

3.Scope : Scope is the accessibility of variables, functions & objects in some particular part of code 
during run-time .

var is global scoped 
let is block scoped
const is block scoped

Interview<--------- TEMPORAL DEAD ZONE -------->
The variable is said to be in TDZ until the time period when a variable exists in a scope 
but cant be accessed .


<------TYPE COERCION----->

The process of converting value from one type to another .

There are two types :

1. Explicit : When you change the type manually .


2. Implicit : When the types are converted automatically when applied operators .

 Q.  let a = null ;
      console.log(typeof(a));  // o/p : object

 Q. Why type of null is object ?
// **** It is a bug in JS and null signifies an empty reference to an object ***



Q<----- null v/s undefined ---->

undefined : When the variable has not been assigned to any value or not even declared .

null : It is a value which refers to a empty value .

Q. What is NaN ?

Ans : Not-a-Number. isNaN()  function is used to determine whether a value is number or not

Q. **** Hoisting in JS ****

Ans : It is a default behaviour in JS in which the declarations move to the top of their scope.

Conclusion :

Variables assigned by let and const are hoisted at the top of the block but not initialized. 

Meaning :

The block of code is aware of the variable , but it cannot be used until it has been declared. 

<------OBJECTS IN JS----->

Collections of properties based on key value pairs are known as objects .

<--- C R U D ----> 

C -> Create
R -> read
U -> update //objectName.key = value ;
D -> Delete

Q. Difference between Arrays and Objects ?

Structure :

Arrays are ordered Collections

Objects are unordered Collections

Access:

Array:
By index 

Object:
By property or key

*** In arrays, keys(index) are only present in integer datatype whereas,
***In objects, the keys can be other than integer datatype 

<-----ARRAYS----->

It is a continuous memory which stores value of same datatype , but in JS, we can store value of any datatype.

Type of Array : object

*** Methods of Array :

1. toString() -> Converts array into string 

2. split() -> Converts string into array

3. join() -> Combines all element of an array into a string

4. push() -> Appends all the elements at the end of the array. T.C : O(1) ;

5. pop() -> Remove the elements from the end of the array. T.C : O(1) ;

6. delete -> It deletes the specific element from the array & leaves empty space.
Syntax : delete arr[index];

7. shift() -> It removes first element from the array and also returns it. T.C : O(n)

8. unshift() -> It adds element at the start of the array. T.C : O(n)

9. splice() -> It allows us to modify the array by either removing , replacing or adding elements.
splice(starting index , ending index , values to be inserted). T.C: O(n)

Imp: It modifies the original array

10. slice() -> It gives a portion of an array.
Imp: It creates a new array and modifies it. 

arr.slice(inclusive index, exclusive index)  T.C : O(k) k-> Portion of the array

<-----STRINGS----->

Collections of multiple characters are called STRINGS.

# How to declare STRINGS ?

In JS,

Eg : let str1 = 'a' ; //String

     let str2 = "bc" //String

     let str3 = `Yo` //String 

     ** `` -> Backtick 

*** STRING CONCATENATION ***

Adding multiple strings is called String CONCATENATION .


*** PROPERTY OF STRING ****

1. String is immutable (!important)

Explanantion : When string is declared , it cannot be updated at *same memory address* . 
If we update it, then it creates a new memory .
Note : It cannot be updated at same memory address 

Ex : 
let str = "namira"; //5K address 
str = "Aniket" // Updated str, new address : 6K address
console.log(str);


<------ STRING LITERALS ------>


A string literal is a sequence of characters enclosed in quotes (either single, double, or backticks) used to represent a string value directly in code. 

In JavaScript, string interpolation is done using template literals, which are enclosed by backticks (`). You can embed variables or expressions inside the string using ${} 


let str1 = "Namira" ;
let str2 = "Food" ;

console.log( `${str1} likes ${str2}` ); // o/p : Namira likes food


<-----METHODS OF STRING ------>

1. str.length -> Determines the string length

2. str.charAt() -> It retrieves the specific character at the i'th index of a string .

3. str.concat() -> Appends the string

4. str.replace() -> It replaces string with user given string

NOTE : The replace() method does not modify the original string. Instead, it returns a new string with the replacement, leaving the original string unchanged.

5. str.trim() -> It removes leading and ending extra spaces from the string.

6. str.includes() -> It gives a boolean value if the string is present or not .

7. str.search() -> It gives the index number of the string if it is present.

8. str.slice() -> It gives the specific portion of the string. Syntax: str.slice(inclusive index , exclusive index).

9. str.substring -> It gives the specific portion of the string. Syntax: str.substring(inclusive index , exclusive index).

10. str.substr() -> It also retrieves the portion of a string but syntax: str.substr( starting index, length) 


<--- FUNCTIONS --->

Functions are reusable blocks of code that can be used to perform a specific task.

Advantages:

Readability , Modularity , Mainitable


TYPES OF FUNCTION :

1. Parameterized Function : The most common way to define a function. 


Syntax : function fnxName (parameter){

     //Code
}

fnxName(argument);  

2. Anonymous function/Lambda -> Function without a name 

3. Arrow functions -> Shorter syntax for a function expression .
Pointers:
We dont have to use the 'function' keyword.
Instead,
We will use brackets and arrow to define a function.


Some terms :

1.First Order function : A function that does not accept another function 
as argument and does not return a function.

2.Pure function : A pure function is a fnx which returns value on the basis of argument.

3. Unary / Monadic function : A fnx which accepts only one argument .

4. Currying : It allows to create a chain of functions , each will take only one argument.

Benefits : Reusable , Readability 

5. HIGHER-ORDER Function : A function that either :

   Accepts one or more 'functions' as argument or,
   returns a function .

6. Callback functions : A function which is passed as an argument to another fnx is called a callback fnx.

7. IIFE (Immediately Invoked Function Expression) : It is defined and executed Immediately after its creation.

   Use: Avoids global pollution in code and data privacy


*** GLOBAL EXECUTION CONTEXT ***

The environment in which JS code is executed .

2 Types : 
Global Execution Context
Function Execution Context 


Each has two phases :
1. Memory Creation Phase 
2. Code Execution Phase 


***LOOPS IN ARRAY***

1. forEach : It executes over each element.

Syntax : arr.forEach((element,index,array)=>{
 console.log(element);
})

It is a HOF .

In JavaScript, the forEach method is not directly available on objects, because forEach is an array method. 


2. Map

It creates a new array with the results of user's operation.

3. Filter

It creates a new array of elements that gives true for a condition.

4. REDUCE

It performs some operations and reduces the array to a single value .

Syntax : arr.reduce((previousValue,currentValue)=>{

}, initial value )


************DOCUMENT OBJECT MODEL (DOM)***************

The Document Object Model (DOM) is an interface for web documents
 that acts as a bridge, allowing JavaScript to interact with an HTML page.


# Window Object:

* It is a global object which contains lots of properties and methods.
* It is browser's object (not JS)
* It is automatically created by browser when page loads.

# Document Object:

*The 'document object' is the primary entry point to interact with the DOM. 
*It's part of the window object in JavaScript .
*It provides various methods and properties to access, modify, or create HTML elements.

Q. Where to write <script> tag?

The best way is 'At the end' .

Reason: It operates in ideal working excution i.e, 1. Renders HTML , 2. Script Loads , 3. Script Execution

Pros : Less load on the server/page

**DEFER***
It is an attribute which is written in <script> tag and it is mentioned in the <head> tag.

Working : HTML RENDERS --------->Script loads meanwhile HTML is rendering --------> Finally script executes

Cons : Server load 

**** DOM MANIPULATION ******

It is a way to access , modify or create elements in JavaScript .

How to access elements ?

1. Selecting by ID : document.getElementById('idName') ;

2. Selecting by Class : document.getElementByClassName('className')

3.Selecting by tag : document.getElementByTagName('h1') ; //tagName

###### QUERY SELECTOR ########

1. document.querySelector(".card")  

-> returns the first matching element

2. document.querySelectorAll(".card");

-> returns all matching element

######## Some properties ############

tagName : Returns tag for element nodes .

innerText : Returns the text content of the element and its children .

innerHTML : Returns the HTML content.

textContent : Returns textual content even for hidden elements (except for comment)

#### ATTRIBUTES ####

1. getAttribute('attributeName') -> Gets the attribute's value 

2. setAttribute(attributeName,value) -> Sets the attribute value 

#### STYLING ###

node.style.styleName = "value"    ----> Adds styling to the node

#### INSERT ELEMENTS ####

1. node.append(ele) -> adds at the end of the node (inside) 

2. node.prepend(ele) -> adds at the start of the node (inside) 

3. node.before(ele) -> adds before the node (outside)

4. node.after(ele) -> adds after the node (outside)


####### DELETE ELEMENT ####

node.remove() -> Removes the node



*********** EVENTS IN JavaScript ************

The change in the state of an object is known as Event .

Few types:

1.Mouse Event (click , double click ,etc.)
2.Keyboard Event (keypress , keyup , keydown)
3.Hover Events (mouse over)
etc....

# Event Handling in JS

There are two ways :

1. Inline handling 
 <button id="btn" onclick="console.log('Button is clicked');">add</button>

** If a node has multiple events theb recent one will override the previous one

2. JS handling /Event listeners

** This allows us to create multiple events of a node.


btn.addEventListener('click', ()=> {
    console.log("The btn is clicked");
})

First Parameter : EventName
Second Paramter : Callback function in which you will write the logic 


### EVENT OBJECT

let btn = document.querySelector('#btn') ;


Q. What is an Event Object ?

It is an object which contains details about various events.

btn.addEventListener('click', (eventObject)=>{
    console.log(eventObject);
})


## EVENT PROPAGATION ##

It is a process that defines the order in which the event will be triggered in DOM. 

It has two phases:

1. Capturing Phase (Trickling) : 
The event starts from the window level and travels downwards to the target element. (TOP TO BOTTOM)

2. Bubbling phase (Default phase) : After reaching the target , the event moves upwards to its
ancestors. (BOTTOM TO TOP)

Example:
let child = document.getElementById('child')
child.addEventListener('click', ()=>{
    console.log('Btn is clicked');
},true);

OPTION Parameter (Boolean)
//true -> event will be triggered during capturing phase
//false -> event will be triggered during bubbling phase

##############################

 e.preventDefault() is a method in JavaScript that is used to cancel
 the default action associated with an event.


When an event occurs, browsers often perform a default action based on the type of event. 
For example:

Clicking on a <button> inside a form triggers the form submission by default.
Clicking on a link (<a>) would navigate to the URL specified in the href attribute.
Pressing the Enter key in a text field might trigger form submission.

What Does e.preventDefault() Do?
* It prevents the browser's default action for that event from happening.
* It allows you to create custom behavior or handle events in a specific way.

# stopPropagation() -> It stops other event listeners on same element from being triggered.

### EVENT DELEGATION:

It is a technique in JS where instead of attaching event listeners
to individual elements , you attach a single event listener to a parent .

By attaching event listener to parent , we can access the event on its children as they bubble
up.


##### Synchronous VS Asynchrounous 

Synchronous programming means each instructions wait for the previous intruction to complete its execution.
* Tasks will be performed line by line

Asynchrounous programming allows the next instructions immediately and does not wait for the previous instruction.
* Tasks will be performed simultaneously 


setTimeout : 

* Asynchrounous in nature

Purpose :
Used to execute the code after a specified delay ( in milliseconds , eg:2000 = 2 seconds)

setInterval :

* Asynchrounous in nature

Purpose :
Used to execute the code/function repeatedly after a specified interval ( in milliseconds , eg:2000 = 2 seconds)

clearInterval:

clearInterval is a JavaScript function used to stop the execution of a function that was set up using setInterval.
Syntax : clearInterval(fnxName to be stopped)


**** Callback Hell ****  

Q1. What is callback fnx ?

A callback function is a function that is passed as an argument to another function 

Q2. Why do we need callbacks? 

It helps in execution for other instructions of code instead of waiting for previous instruction.
It helps in Asynchrounous programming .



CALLBACK HELL :

Nested callbacks stacked below one after another forming a pyramid like structure (Pyramid of Doom)is called
Callback Hell .
Demerits:
1.Hard to read
2.Hard to debug 

Solution : Use promises 

## PROMISE 

It is an object in JS which tells about the success or failure of the Asynchrounous task .

** Generally , API creates promises and developers handle them

Three states of Promise :

1. pending -> Result undefined

2. fulfilled (resolved) -> Result is retrieved / If work is resolved

3. reject -> If work is not resolved

Syntax : let promise = new Promise ( (resolve,reject) =>{

        //Code 
} )

# How to use Promises ?

If promise is fulfilled then use :

    promise.then((res)=>{

    }) 
     
     //Work to be done

If promise is rejected then use :

    promise.catch((err)=>{
        console.log(err);
    })

Example : 
let promise = new Promise((resolve,reject)=>{
    
    reject('Data fetched')
})

console.log(promise);


promise.then((res)=>{
    console.log('used forEach');
}).catch((err)=>{
    console.log('Error fetching data');
})


** Sometimes promises are also hard to debug so the final solution to it is 'async' function .

Solution : Async Await 

### async ###

The 'async' keyword is used to define a function as asynchronous. When a function is marked as async, 
it will always return a promise, even if you return a non-promise value. 
The async function allows you to use the 'await' keyword inside it.

Eg : async function getData(){
    //code
}

## await ##

'await' pauses the execution of its surrounding async function until promise is settled .


 Eg:

 async function getAllData(){

     await getData(1); 
     await getData(2);
 }

##Error handling in async-await 

try{
    //  The code in 'try' block will be executed first and if there is no error catch block will
    be ignored
}
catch(err){
   console.log('Error')
}
finally{
    // This block will be executed in all cases either there were errors or no errors
}


# API : Application Programming interface

Pre written code which acts as a link between two interfaces/application

### fetch

The 'fetch' keyword is used to fetch a data from an API.

Ex : 

async function getData(){

let response = await fetch(url); // RESPONSE OBJECT 
let data = response.json();
}


Key points :

1. If the promise is resolved , it will give us a Response Object.

2. To read the data, we convert it to JSON(JavaScript Object Notation) format.


RESPONSE STATUS CODE : It signifies the success or failure of HTTP request
1. Informational Response (100 - 199)

2. Successfull response (200-299)

3. Redirection messages (300-399)
These codes tell the client (typically a browser) that 
it needs to take additional action to complete the request.

4. Client-error response (400-499)

5. Server-error response (500-599)

Q. What are Headers in API ? 
Ans : It contains additional Information about responses



### Local Storage vs Session Storage

It is a part of Web Storage API which allows developers to store data in an user's browser.

Difference:


Local : Data will be present even if the browser is closed or reopened .
Session : Data will be present for a specific duration of the page session only.

Storage capacity :
Local storage : 5-10 MB
Session storage : 5 MB


Feature	                  Local Storage	                            Session Storage
Persistence:	      Persists even after browser closes	  Data is lost when the browser/tab closes
Scope:	            Accessible across all tabs/windows	       Accessible only in the same tab/window
Storage Capacity:	   ~5-10MB per origin	                    ~5MB per origin
Storage Event:	    Triggers storage event on updates	    Does not trigger storage event
Typical Use:	 Long-term data (settings, preferences)	    Short-term data (session state, forms)


###

localStorage.setItem(key, value);

key: The name of the data to store (a string). It is the identifier for the data. 
The key is used to retrieve the stored value later.

value: The data you want to store (also a string). 
If the value is an object or array, it must first be converted to a string using JSON.stringify().

## STRINGIFY :

To convert the JS object/array into JSON string format use JSON.stringify(data)

To retrieve the data back into object/array form use JSON.parse(data)




## CLOSURES

A closure is the combination of a function bundled together with
 its lexical environment. 

Closure gives a fnx access to its outer scope .

Lexical Environment : A lexical environment is the context within which a 
set of variables and their values are stored,
along with the reference to the outer environment.

## Debounce :

It is a technique used to limit the rate at which a function executes .

Benefits : Improves performance 
           Prevents unnecessary function calls / server overloading

How it works?

 Delay execution :
 Instead of running the fnx everytimr an event occurs, it allows us to wait
 for a specified delay(ms) after last event has occurred .

 Eg : 
 
 function debounce (fnx to be debounced, delay in ms){

    let timer ;

    //if event occurs while delay perios is still ongoing , cancel the prev one
    if(timer){
        clearTimeout(timer);
    }
   // Set a new timer to execute the fnx after delay
    timer = setTimeout(()=>{
        func(args);
    },delay)
 }


##Throttling :

It ensures that the function is called at most once in a specified time frame ,
regardless of how many times an event has been triggered.



#EVENT LOOP :

It is a mechanism that handles asynchronous operations like callbacks , promises, and timers.

How the event loop works? 


1. Call stack :

It stores Information about the current executing function.
When a fnx is "pushed" onto the stack and when the fnx finishes
execution , it is "popped" off the stack.


2. WEB API
It is a browser's mechanism which holds the asynchronous task until it is executed


3. Task Queue

4. MicroTask Queue (High Priority)
5. MacroTask Queue (Low Priority)




